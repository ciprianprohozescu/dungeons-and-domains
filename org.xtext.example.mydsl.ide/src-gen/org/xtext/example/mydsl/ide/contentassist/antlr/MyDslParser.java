/*
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives_0(), "rule__Statement__Alternatives_0");
			builder.put(grammarAccess.getAssignmentAccess().getAlternatives_1(), "rule__Assignment__Alternatives_1");
			builder.put(grammarAccess.getTermAccess().getAlternatives(), "rule__Term__Alternatives");
			builder.put(grammarAccess.getRelationalOperatorAccess().getAlternatives(), "rule__RelationalOperator__Alternatives");
			builder.put(grammarAccess.getDndGameAccess().getGroup(), "rule__DndGame__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getItemAccess().getGroup(), "rule__Item__Group__0");
			builder.put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
			builder.put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getConditionalAccess().getGroup(), "rule__Conditional__Group__0");
			builder.put(grammarAccess.getConditionalAccess().getGroup_4(), "rule__Conditional__Group_4__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getPrintAccess().getGroup(), "rule__Print__Group__0");
			builder.put(grammarAccess.getSimpleActionAccess().getGroup(), "rule__SimpleAction__Group__0");
			builder.put(grammarAccess.getDndGameAccess().getStatesAssignment_0(), "rule__DndGame__StatesAssignment_0");
			builder.put(grammarAccess.getDndGameAccess().getItemsAssignment_1(), "rule__DndGame__ItemsAssignment_1");
			builder.put(grammarAccess.getDndGameAccess().getActionsAssignment_2(), "rule__DndGame__ActionsAssignment_2");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
			builder.put(grammarAccess.getStateAccess().getDescriptionAssignment_4(), "rule__State__DescriptionAssignment_4");
			builder.put(grammarAccess.getItemAccess().getNameAssignment_1(), "rule__Item__NameAssignment_1");
			builder.put(grammarAccess.getItemAccess().getValueAssignment_3(), "rule__Item__ValueAssignment_3");
			builder.put(grammarAccess.getActionAccess().getStateAssignment_2(), "rule__Action__StateAssignment_2");
			builder.put(grammarAccess.getActionAccess().getDescriptionAssignment_3(), "rule__Action__DescriptionAssignment_3");
			builder.put(grammarAccess.getActionAccess().getStatementsAssignment_5(), "rule__Action__StatementsAssignment_5");
			builder.put(grammarAccess.getStatementAccess().getAssignmentAssignment_0_0(), "rule__Statement__AssignmentAssignment_0_0");
			builder.put(grammarAccess.getStatementAccess().getConditionalAssignment_0_1(), "rule__Statement__ConditionalAssignment_0_1");
			builder.put(grammarAccess.getStatementAccess().getActionAssignment_0_2(), "rule__Statement__ActionAssignment_0_2");
			builder.put(grammarAccess.getStatementAccess().getPrintAssignment_0_3(), "rule__Statement__PrintAssignment_0_3");
			builder.put(grammarAccess.getAssignmentAccess().getTargetAssignment_0(), "rule__Assignment__TargetAssignment_0");
			builder.put(grammarAccess.getAssignmentAccess().getValueAssignment_2(), "rule__Assignment__ValueAssignment_2");
			builder.put(grammarAccess.getConditionalAccess().getExpressionAssignment_1(), "rule__Conditional__ExpressionAssignment_1");
			builder.put(grammarAccess.getConditionalAccess().getBodyAssignment_3(), "rule__Conditional__BodyAssignment_3");
			builder.put(grammarAccess.getConditionalAccess().getElseAssignment_4_1(), "rule__Conditional__ElseAssignment_4_1");
			builder.put(grammarAccess.getExpressionAccess().getLeftAssignment_0(), "rule__Expression__LeftAssignment_0");
			builder.put(grammarAccess.getExpressionAccess().getOperatorAssignment_1(), "rule__Expression__OperatorAssignment_1");
			builder.put(grammarAccess.getExpressionAccess().getRightAssignment_2(), "rule__Expression__RightAssignment_2");
			builder.put(grammarAccess.getBlockAccess().getStatementsAssignment(), "rule__Block__StatementsAssignment");
			builder.put(grammarAccess.getPrintAccess().getDescriptionAssignment_1(), "rule__Print__DescriptionAssignment_1");
			builder.put(grammarAccess.getSimpleActionAccess().getStateAssignment_1(), "rule__SimpleAction__StateAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}

/*
 * generated by Xtext 2.29.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDndGame
entryRuleDndGame
:
{ before(grammarAccess.getDndGameRule()); }
	 ruleDndGame
{ after(grammarAccess.getDndGameRule()); } 
	 EOF 
;

// Rule DndGame
ruleDndGame 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDndGameAccess().getGroup()); }
		(rule__DndGame__Group__0)
		{ after(grammarAccess.getDndGameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleState
entryRuleState
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateAccess().getGroup()); }
		(rule__State__Group__0)
		{ after(grammarAccess.getStateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleItem
entryRuleItem
:
{ before(grammarAccess.getItemRule()); }
	 ruleItem
{ after(grammarAccess.getItemRule()); } 
	 EOF 
;

// Rule Item
ruleItem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getItemAccess().getGroup()); }
		(rule__Item__Group__0)
		{ after(grammarAccess.getItemAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getGroup()); }
		(rule__Action__Group__0)
		{ after(grammarAccess.getActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup()); }
		(rule__Assignment__Group__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditional
entryRuleConditional
:
{ before(grammarAccess.getConditionalRule()); }
	 ruleConditional
{ after(grammarAccess.getConditionalRule()); } 
	 EOF 
;

// Rule Conditional
ruleConditional 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalAccess().getGroup()); }
		(rule__Conditional__Group__0)
		{ after(grammarAccess.getConditionalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup()); }
		(rule__Expression__Group__0)
		{ after(grammarAccess.getExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerm
entryRuleTerm
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTermAccess().getAlternatives()); }
		(rule__Term__Alternatives)
		{ after(grammarAccess.getTermAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationalOperator
entryRuleRelationalOperator
:
{ before(grammarAccess.getRelationalOperatorRule()); }
	 ruleRelationalOperator
{ after(grammarAccess.getRelationalOperatorRule()); } 
	 EOF 
;

// Rule RelationalOperator
ruleRelationalOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
		(rule__RelationalOperator__Alternatives)
		{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getStatementsAssignment()); }
		(rule__Block__StatementsAssignment)*
		{ after(grammarAccess.getBlockAccess().getStatementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrint
entryRulePrint
:
{ before(grammarAccess.getPrintRule()); }
	 rulePrint
{ after(grammarAccess.getPrintRule()); } 
	 EOF 
;

// Rule Print
rulePrint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintAccess().getGroup()); }
		(rule__Print__Group__0)
		{ after(grammarAccess.getPrintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleAction
entryRuleSimpleAction
:
{ before(grammarAccess.getSimpleActionRule()); }
	 ruleSimpleAction
{ after(grammarAccess.getSimpleActionRule()); } 
	 EOF 
;

// Rule SimpleAction
ruleSimpleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleActionAccess().getGroup()); }
		(rule__SimpleAction__Group__0)
		{ after(grammarAccess.getSimpleActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getAssignmentAssignment_0()); }
		(rule__Statement__AssignmentAssignment_0)
		{ after(grammarAccess.getStatementAccess().getAssignmentAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getConditionalAssignment_1()); }
		(rule__Statement__ConditionalAssignment_1)
		{ after(grammarAccess.getStatementAccess().getConditionalAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getActionAssignment_2()); }
		(rule__Statement__ActionAssignment_2)
		{ after(grammarAccess.getStatementAccess().getActionAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getPrintAssignment_3()); }
		(rule__Statement__PrintAssignment_3)
		{ after(grammarAccess.getStatementAccess().getPrintAssignment_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getAddKeyword_1_0()); }
		'add'
		{ after(grammarAccess.getAssignmentAccess().getAddKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentAccess().getRemoveKeyword_1_1()); }
		'remove'
		{ after(grammarAccess.getAssignmentAccess().getRemoveKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getTermAccess().getINTTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getTermAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_0()); }
		'>'
		{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_1()); }
		'<'
		{ after(grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_2()); }
		'>='
		{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_3()); }
		'<='
		{ after(grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getEqualsSignEqualsSignKeyword_4()); }
		'=='
		{ after(grammarAccess.getRelationalOperatorAccess().getEqualsSignEqualsSignKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getLessThanSignGreaterThanSignKeyword_5()); }
		'<>'
		{ after(grammarAccess.getRelationalOperatorAccess().getLessThanSignGreaterThanSignKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DndGame__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DndGame__Group__0__Impl
	rule__DndGame__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DndGame__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDndGameAccess().getStatesAssignment_0()); }
	(rule__DndGame__StatesAssignment_0)*
	{ after(grammarAccess.getDndGameAccess().getStatesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DndGame__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DndGame__Group__1__Impl
	rule__DndGame__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DndGame__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDndGameAccess().getItemsAssignment_1()); }
	(rule__DndGame__ItemsAssignment_1)*
	{ after(grammarAccess.getDndGameAccess().getItemsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DndGame__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DndGame__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DndGame__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDndGameAccess().getActionsAssignment_2()); }
	(rule__DndGame__ActionsAssignment_2)*
	{ after(grammarAccess.getDndGameAccess().getActionsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__0__Impl
	rule__State__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getStateKeyword_0()); }
	'state'
	{ after(grammarAccess.getStateAccess().getStateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__1__Impl
	rule__State__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getNameAssignment_1()); }
	(rule__State__NameAssignment_1)
	{ after(grammarAccess.getStateAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__2__Impl
	rule__State__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getStartKeyword_2()); }
	('start')?
	{ after(grammarAccess.getStateAccess().getStartKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__3__Impl
	rule__State__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getFinalKeyword_3()); }
	('final')?
	{ after(grammarAccess.getStateAccess().getFinalKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__4__Impl
	rule__State__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getDescriptionAssignment_4()); }
	(rule__State__DescriptionAssignment_4)
	{ after(grammarAccess.getStateAccess().getDescriptionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getSemicolonKeyword_5()); }
	';'
	{ after(grammarAccess.getStateAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Item__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Item__Group__0__Impl
	rule__Item__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItemAccess().getItemKeyword_0()); }
	'item'
	{ after(grammarAccess.getItemAccess().getItemKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Item__Group__1__Impl
	rule__Item__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItemAccess().getNameAssignment_1()); }
	(rule__Item__NameAssignment_1)
	{ after(grammarAccess.getItemAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Item__Group__2__Impl
	rule__Item__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItemAccess().getSetKeyword_2()); }
	'set'
	{ after(grammarAccess.getItemAccess().getSetKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Item__Group__3__Impl
	rule__Item__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItemAccess().getValueAssignment_3()); }
	(rule__Item__ValueAssignment_3)
	{ after(grammarAccess.getItemAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Item__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItemAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getItemAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__0__Impl
	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getActionKeyword_0()); }
	'action'
	{ after(grammarAccess.getActionAccess().getActionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__1__Impl
	rule__Action__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getInKeyword_1()); }
	'in'
	{ after(grammarAccess.getActionAccess().getInKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__2__Impl
	rule__Action__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getStateAssignment_2()); }
	(rule__Action__StateAssignment_2)
	{ after(grammarAccess.getActionAccess().getStateAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__3__Impl
	rule__Action__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getDescriptionAssignment_3()); }
	(rule__Action__DescriptionAssignment_3)
	{ after(grammarAccess.getActionAccess().getDescriptionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__4__Impl
	rule__Action__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getDoKeyword_4()); }
	'do'
	{ after(grammarAccess.getActionAccess().getDoKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__5__Impl
	rule__Action__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getStatementsAssignment_5()); }
	(rule__Action__StatementsAssignment_5)*
	{ after(grammarAccess.getActionAccess().getStatementsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getEndKeyword_6()); }
	'end'
	{ after(grammarAccess.getActionAccess().getEndKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getTargetAssignment_0()); }
	(rule__Assignment__TargetAssignment_0)
	{ after(grammarAccess.getAssignmentAccess().getTargetAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getAlternatives_1()); }
	(rule__Assignment__Alternatives_1)
	{ after(grammarAccess.getAssignmentAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__2__Impl
	rule__Assignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
	(rule__Assignment__ValueAssignment_2)
	{ after(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getAssignmentAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__0__Impl
	rule__Conditional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getCheckKeyword_0()); }
	'check'
	{ after(grammarAccess.getConditionalAccess().getCheckKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__1__Impl
	rule__Conditional__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getExpressionAssignment_1()); }
	(rule__Conditional__ExpressionAssignment_1)
	{ after(grammarAccess.getConditionalAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__2__Impl
	rule__Conditional__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getThenKeyword_2()); }
	'then'
	{ after(grammarAccess.getConditionalAccess().getThenKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__3__Impl
	rule__Conditional__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getBodyAssignment_3()); }
	(rule__Conditional__BodyAssignment_3)
	{ after(grammarAccess.getConditionalAccess().getBodyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__4__Impl
	rule__Conditional__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getGroup_4()); }
	(rule__Conditional__Group_4__0)?
	{ after(grammarAccess.getConditionalAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getEndcheckKeyword_5()); }
	'endcheck'
	{ after(grammarAccess.getConditionalAccess().getEndcheckKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group_4__0__Impl
	rule__Conditional__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getElseKeyword_4_0()); }
	'else'
	{ after(grammarAccess.getConditionalAccess().getElseKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getElseAssignment_4_1()); }
	(rule__Conditional__ElseAssignment_4_1)
	{ after(grammarAccess.getConditionalAccess().getElseAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getLeftAssignment_0()); }
	(rule__Expression__LeftAssignment_0)
	{ after(grammarAccess.getExpressionAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__1__Impl
	rule__Expression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getOperatorAssignment_1()); }
	(rule__Expression__OperatorAssignment_1)
	{ after(grammarAccess.getExpressionAccess().getOperatorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRightAssignment_2()); }
	(rule__Expression__RightAssignment_2)
	{ after(grammarAccess.getExpressionAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__0__Impl
	rule__Print__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getShowKeyword_0()); }
	'show'
	{ after(grammarAccess.getPrintAccess().getShowKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__1__Impl
	rule__Print__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getDescriptionAssignment_1()); }
	(rule__Print__DescriptionAssignment_1)
	{ after(grammarAccess.getPrintAccess().getDescriptionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getPrintAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleAction__Group__0__Impl
	rule__SimpleAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleActionAccess().getGotoKeyword_0()); }
	'goto'
	{ after(grammarAccess.getSimpleActionAccess().getGotoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleAction__Group__1__Impl
	rule__SimpleAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleActionAccess().getStateAssignment_1()); }
	(rule__SimpleAction__StateAssignment_1)
	{ after(grammarAccess.getSimpleActionAccess().getStateAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleAction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleActionAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getSimpleActionAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DndGame__StatesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDndGameAccess().getStatesStateParserRuleCall_0_0()); }
		ruleState
		{ after(grammarAccess.getDndGameAccess().getStatesStateParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DndGame__ItemsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDndGameAccess().getItemsItemParserRuleCall_1_0()); }
		ruleItem
		{ after(grammarAccess.getDndGameAccess().getItemsItemParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DndGame__ActionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDndGameAccess().getActionsActionParserRuleCall_2_0()); }
		ruleAction
		{ after(grammarAccess.getDndGameAccess().getActionsActionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__DescriptionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getDescriptionSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getStateAccess().getDescriptionSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getItemAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getItemAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getItemAccess().getValueINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getItemAccess().getValueINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__StateAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getStateStateCrossReference_2_0()); }
		(
			{ before(grammarAccess.getActionAccess().getStateStateIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getActionAccess().getStateStateIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getActionAccess().getStateStateCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__DescriptionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getDescriptionSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getActionAccess().getDescriptionSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__StatementsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getStatementsStatementParserRuleCall_5_0()); }
		ruleStatement
		{ after(grammarAccess.getActionAccess().getStatementsStatementParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__AssignmentAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getAssignmentAssignmentParserRuleCall_0_0()); }
		ruleAssignment
		{ after(grammarAccess.getStatementAccess().getAssignmentAssignmentParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__ConditionalAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getConditionalConditionalParserRuleCall_1_0()); }
		ruleConditional
		{ after(grammarAccess.getStatementAccess().getConditionalConditionalParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__ActionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getActionSimpleActionParserRuleCall_2_0()); }
		ruleSimpleAction
		{ after(grammarAccess.getStatementAccess().getActionSimpleActionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__PrintAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getPrintPrintParserRuleCall_3_0()); }
		rulePrint
		{ after(grammarAccess.getStatementAccess().getPrintPrintParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__TargetAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getTargetItemCrossReference_0_0()); }
		(
			{ before(grammarAccess.getAssignmentAccess().getTargetItemIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAssignmentAccess().getTargetItemIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getAssignmentAccess().getTargetItemCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getValueINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getAssignmentAccess().getValueINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getConditionalAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__BodyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalAccess().getBodyBlockParserRuleCall_3_0()); }
		ruleBlock
		{ after(grammarAccess.getConditionalAccess().getBodyBlockParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__ElseAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalAccess().getElseBlockParserRuleCall_4_1_0()); }
		ruleBlock
		{ after(grammarAccess.getConditionalAccess().getElseBlockParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getLeftTermParserRuleCall_0_0()); }
		ruleTerm
		{ after(grammarAccess.getExpressionAccess().getLeftTermParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__OperatorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getOperatorRelationalOperatorParserRuleCall_1_0()); }
		ruleRelationalOperator
		{ after(grammarAccess.getExpressionAccess().getOperatorRelationalOperatorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getRightTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getExpressionAccess().getRightTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__DescriptionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintAccess().getDescriptionSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getPrintAccess().getDescriptionSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAction__StateAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleActionAccess().getStateStateCrossReference_1_0()); }
		(
			{ before(grammarAccess.getSimpleActionAccess().getStateStateIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSimpleActionAccess().getStateStateIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getSimpleActionAccess().getStateStateCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

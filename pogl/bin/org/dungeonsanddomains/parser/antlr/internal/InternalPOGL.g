/*
 * generated by Xtext 2.29.0
 */
grammar InternalPOGL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.dungeonsanddomains.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.dungeonsanddomains.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.dungeonsanddomains.services.POGLGrammarAccess;

}

@parser::members {

 	private POGLGrammarAccess grammarAccess;

    public InternalPOGLParser(TokenStream input, POGLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected POGLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgramAccess().getDefinitionsDefinitionParserRuleCall_0());
			}
			lv_definitions_0_0=ruleDefinition
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgramRule());
				}
				add(
					$current,
					"definitions",
					lv_definitions_0_0,
					"org.dungeonsanddomains.POGL.Definition");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	iv_ruleDefinition=ruleDefinition
	{ $current=$iv_ruleDefinition.current; }
	EOF;

// Rule Definition
ruleDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDefinitionAccess().getDefinitionStateDefParserRuleCall_0_0());
				}
				lv_definition_0_1=ruleStateDef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefinitionRule());
					}
					set(
						$current,
						"definition",
						lv_definition_0_1,
						"org.dungeonsanddomains.POGL.StateDef");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getDefinitionAccess().getDefinitionItemDefParserRuleCall_0_1());
				}
				lv_definition_0_2=ruleItemDef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefinitionRule());
					}
					set(
						$current,
						"definition",
						lv_definition_0_2,
						"org.dungeonsanddomains.POGL.ItemDef");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getDefinitionAccess().getDefinitionActionDefParserRuleCall_0_2());
				}
				lv_definition_0_3=ruleActionDef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefinitionRule());
					}
					set(
						$current,
						"definition",
						lv_definition_0_3,
						"org.dungeonsanddomains.POGL.ActionDef");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStateDef
entryRuleStateDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateDefRule()); }
	iv_ruleStateDef=ruleStateDef
	{ $current=$iv_ruleStateDef.current; }
	EOF;

// Rule StateDef
ruleStateDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='state'
		{
			newLeafNode(otherlv_0, grammarAccess.getStateDefAccess().getStateKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStateDefAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateDefRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				(
					lv_optionalStateModifier_2_1='start'
					{
						newLeafNode(lv_optionalStateModifier_2_1, grammarAccess.getStateDefAccess().getOptionalStateModifierStartKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStateDefRule());
						}
						setWithLastConsumed($current, "optionalStateModifier", lv_optionalStateModifier_2_1, null);
					}
					    |
					lv_optionalStateModifier_2_2='final'
					{
						newLeafNode(lv_optionalStateModifier_2_2, grammarAccess.getStateDefAccess().getOptionalStateModifierFinalKeyword_2_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStateDefRule());
						}
						setWithLastConsumed($current, "optionalStateModifier", lv_optionalStateModifier_2_2, null);
					}
				)
			)
		)?
		(
			(
				lv_message_3_0=RULE_STRING
				{
					newLeafNode(lv_message_3_0, grammarAccess.getStateDefAccess().getMessageSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateDefRule());
					}
					setWithLastConsumed(
						$current,
						"message",
						lv_message_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getStateDefAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleItemDef
entryRuleItemDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getItemDefRule()); }
	iv_ruleItemDef=ruleItemDef
	{ $current=$iv_ruleItemDef.current; }
	EOF;

// Rule ItemDef
ruleItemDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='item'
		{
			newLeafNode(otherlv_0, grammarAccess.getItemDefAccess().getItemKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getItemDefAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getItemDefRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='set'
		{
			newLeafNode(otherlv_2, grammarAccess.getItemDefAccess().getSetKeyword_2());
		}
		(
			(
				lv_value_3_0=RULE_INT
				{
					newLeafNode(lv_value_3_0, grammarAccess.getItemDefAccess().getValueINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getItemDefRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getItemDefAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleActionDef
entryRuleActionDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionDefRule()); }
	iv_ruleActionDef=ruleActionDef
	{ $current=$iv_ruleActionDef.current; }
	EOF;

// Rule ActionDef
ruleActionDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='action'
		{
			newLeafNode(otherlv_0, grammarAccess.getActionDefAccess().getActionKeyword_0());
		}
		otherlv_1='in'
		{
			newLeafNode(otherlv_1, grammarAccess.getActionDefAccess().getInKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActionDefRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getActionDefAccess().getStateStateDefCrossReference_2_0());
				}
			)
		)
		(
			(
				lv_message_3_0=RULE_STRING
				{
					newLeafNode(lv_message_3_0, grammarAccess.getActionDefAccess().getMessageSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActionDefRule());
					}
					setWithLastConsumed(
						$current,
						"message",
						lv_message_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='do'
		{
			newLeafNode(otherlv_4, grammarAccess.getActionDefAccess().getDoKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActionDefAccess().getInstructionsInstructionParserRuleCall_5_0());
				}
				lv_instructions_5_0=ruleInstruction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionDefRule());
					}
					add(
						$current,
						"instructions",
						lv_instructions_5_0,
						"org.dungeonsanddomains.POGL.Instruction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='end'
		{
			newLeafNode(otherlv_6, grammarAccess.getActionDefAccess().getEndKeyword_6());
		}
	)
;

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInstructionAccess().getTypeItemManipulationParserRuleCall_0_0());
				}
				lv_type_0_1=ruleItemManipulation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstructionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_1,
						"org.dungeonsanddomains.POGL.ItemManipulation");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getInstructionAccess().getTypeCheckParserRuleCall_0_1());
				}
				lv_type_0_2=ruleCheck
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstructionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_2,
						"org.dungeonsanddomains.POGL.Check");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getInstructionAccess().getTypeMessageDisplayParserRuleCall_0_2());
				}
				lv_type_0_3=ruleMessageDisplay
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstructionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_3,
						"org.dungeonsanddomains.POGL.MessageDisplay");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getInstructionAccess().getTypeStateTransitionParserRuleCall_0_3());
				}
				lv_type_0_4=ruleStateTransition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstructionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_4,
						"org.dungeonsanddomains.POGL.StateTransition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleItemManipulation
entryRuleItemManipulation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getItemManipulationRule()); }
	iv_ruleItemManipulation=ruleItemManipulation
	{ $current=$iv_ruleItemManipulation.current; }
	EOF;

// Rule ItemManipulation
ruleItemManipulation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='item'
		{
			newLeafNode(otherlv_0, grammarAccess.getItemManipulationAccess().getItemKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getItemManipulationRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getItemManipulationAccess().getItemItemDefCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2='add'
			{
				newLeafNode(otherlv_2, grammarAccess.getItemManipulationAccess().getAddKeyword_2_0());
			}
			    |
			otherlv_3='remove'
			{
				newLeafNode(otherlv_3, grammarAccess.getItemManipulationAccess().getRemoveKeyword_2_1());
			}
		)
		(
			(
				lv_value_4_0=RULE_INT
				{
					newLeafNode(lv_value_4_0, grammarAccess.getItemManipulationAccess().getValueINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getItemManipulationRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getItemManipulationAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleCheck
entryRuleCheck returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCheckRule()); }
	iv_ruleCheck=ruleCheck
	{ $current=$iv_ruleCheck.current; }
	EOF;

// Rule Check
ruleCheck returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='check'
		{
			newLeafNode(otherlv_0, grammarAccess.getCheckAccess().getCheckKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCheckRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getCheckAccess().getItemItemDefCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCheckAccess().getComparisonOperatorComparisonOperatorParserRuleCall_2_0());
				}
				lv_comparisonOperator_2_0=ruleComparisonOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheckRule());
					}
					set(
						$current,
						"comparisonOperator",
						lv_comparisonOperator_2_0,
						"org.dungeonsanddomains.POGL.ComparisonOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_value_3_0=RULE_INT
				{
					newLeafNode(lv_value_3_0, grammarAccess.getCheckAccess().getValueINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCheckRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='then'
		{
			newLeafNode(otherlv_4, grammarAccess.getCheckAccess().getThenKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCheckAccess().getInstructionsIfTrueInstructionParserRuleCall_5_0());
				}
				lv_instructionsIfTrue_5_0=ruleInstruction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheckRule());
					}
					add(
						$current,
						"instructionsIfTrue",
						lv_instructionsIfTrue_5_0,
						"org.dungeonsanddomains.POGL.Instruction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='else'
		{
			newLeafNode(otherlv_6, grammarAccess.getCheckAccess().getElseKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCheckAccess().getInstructionsIfFalseInstructionParserRuleCall_7_0());
				}
				lv_instructionsIfFalse_7_0=ruleInstruction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheckRule());
					}
					add(
						$current,
						"instructionsIfFalse",
						lv_instructionsIfFalse_7_0,
						"org.dungeonsanddomains.POGL.Instruction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='endcheck'
		{
			newLeafNode(otherlv_8, grammarAccess.getCheckAccess().getEndcheckKeyword_8());
		}
	)
;

// Entry rule entryRuleComparisonOperator
entryRuleComparisonOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComparisonOperatorRule()); }
	iv_ruleComparisonOperator=ruleComparisonOperator
	{ $current=$iv_ruleComparisonOperator.current.getText(); }
	EOF;

// Rule ComparisonOperator
ruleComparisonOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getGreaterThanSignKeyword_0());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getLessThanSignKeyword_1());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getEqualsSignKeyword_2());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getExclamationMarkEqualsSignKeyword_3());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getGreaterThanSignEqualsSignKeyword_4());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getLessThanSignEqualsSignKeyword_5());
		}
	)
;

// Entry rule entryRuleMessageDisplay
entryRuleMessageDisplay returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMessageDisplayRule()); }
	iv_ruleMessageDisplay=ruleMessageDisplay
	{ $current=$iv_ruleMessageDisplay.current; }
	EOF;

// Rule MessageDisplay
ruleMessageDisplay returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='show'
		{
			newLeafNode(otherlv_0, grammarAccess.getMessageDisplayAccess().getShowKeyword_0());
		}
		(
			(
				lv_message_1_0=RULE_STRING
				{
					newLeafNode(lv_message_1_0, grammarAccess.getMessageDisplayAccess().getMessageSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMessageDisplayRule());
					}
					setWithLastConsumed(
						$current,
						"message",
						lv_message_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getMessageDisplayAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleStateTransition
entryRuleStateTransition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateTransitionRule()); }
	iv_ruleStateTransition=ruleStateTransition
	{ $current=$iv_ruleStateTransition.current; }
	EOF;

// Rule StateTransition
ruleStateTransition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='goto'
		{
			newLeafNode(otherlv_0, grammarAccess.getStateTransitionAccess().getGotoKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateTransitionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getStateTransitionAccess().getStateStateDefCrossReference_1_0());
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getStateTransitionAccess().getSemicolonKeyword_2());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

/*
 * generated by Xtext 2.29.0
 */
package org.dnd.scoping;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.dnd.pOGL.POGLPackage;
import org.dnd.pOGL.FullyQualifiedState;
import org.dnd.pOGL.FullyQualifiedItem;
import org.dnd.pOGL.Adventure;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class POGLScopeProvider extends AbstractPOGLScopeProvider {

	@Override
	public IScope getScope(EObject context, EReference reference) {
		if (reference == POGLPackage.Literals.FULLY_QUALIFIED_STATE__STATE) {
			FullyQualifiedState fullyQualifiedState = (FullyQualifiedState) context;
			if (fullyQualifiedState.eIsSet(POGLPackage.Literals.FULLY_QUALIFIED_STATE__ADVENTURE)) {
				Adventure adventure = fullyQualifiedState.getAdventure();
				return Scopes.scopeFor(adventure.getDefinitions());
			}
		}
		
		if (reference == POGLPackage.Literals.FULLY_QUALIFIED_ITEM__ITEM) {
			FullyQualifiedItem fullyQualifiedItem = (FullyQualifiedItem) context;
			if (fullyQualifiedItem.eIsSet(POGLPackage.Literals.FULLY_QUALIFIED_ITEM__ADVENTURE)) {
				Adventure adventure = fullyQualifiedItem.getAdventure();
				return Scopes.scopeFor(adventure.getDefinitions());
			}
		}
		
		return super.getScope(context, reference);
	}
	
}

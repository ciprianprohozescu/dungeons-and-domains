/*
 * generated by Xtext 2.29.0
 */
package org.dnd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.dnd.pOGL.POGLPackage

/**
 * Pretty-prints POGL programs.
 */
class POGLPrettyPrinter implements POGLAbstractGenerator {

	String program
	
	override void generate(Resource input, IFileSystemAccess2 fsa) {
		program = ""
				
//		// Pretty-print states
//		for (e : input.allContents.toIterable.filter(org.dnd.pOGL.State)) {
//            program += e.visit
//        }
//        
//        program += "\n"
//        
//        // Pretty-print items
//		for (e : input.allContents.toIterable.filter(org.dnd.pOGL.Item)) {
//            program += e.visit
//        }
//        
//        program += "\n"
//        
//        // Pretty-print actions
//		for (e : input.allContents.toIterable.filter(org.dnd.pOGL.Action)) {
//            program += e.visit + "\n"
//        }
//        
//        // Generate output file
//        fsa.generateFile('pretty_pogl.pogl', program)
	}
	
	private def dispatch visit(org.dnd.pOGL.State state) '''
        state «state.name» «state.optionalStateModifier» "«state.description»";
    '''
    
    private def dispatch visit(org.dnd.pOGL.Item item) '''
        item «item.name»«IF item.eIsSet(POGLPackage.Literals.ITEM__VALUE)» set «item.value»«ENDIF»;
    '''
    
    private def dispatch visit(org.dnd.pOGL.Action action) '''
        action «action.name» «IF action.eIsSet(POGLPackage.Literals.ACTION__VISIBILITY)»«action.visibility»«ENDIF» in «action.state.name» "«action.description»" do
        	«FOR instruction : action.instructions»«instruction.visit»«ENDFOR»
        end
    '''
    
    private def dispatch visit(org.dnd.pOGL.ItemManipulation itemManipulation) '''
        «itemManipulation.item.name» «itemManipulation.operator» «itemManipulation.value»;
    '''
    
    private def dispatch visit(org.dnd.pOGL.Check check) {
    	var content = "check " + check.expression.visit;
    	for (expression : check.andExpressions) {
    		content += " and " + expression.visit
    	}
    	return content + "then\n" + '''
	        	«FOR instruction : check.instructionsIfTrue»«instruction.visit»«ENDFOR»
	        «IF check.eIsSet(POGLPackage.Literals.CHECK__INSTRUCTIONS_IF_FALSE)»
	        else
	        	«FOR instruction : check.instructionsIfFalse»«instruction.visit»«ENDFOR»
	        «ENDIF»
	        endcheck
    	'''
    }
    
    private def dispatch visit(org.dnd.pOGL.Expression expression) '''
        «expression.left.visit» «expression.operator» «expression.right.visit»
    '''
    
    private def dispatch visit(org.dnd.pOGL.Term term) {
    	if (term.eIsSet(POGLPackage.Literals.TERM__TERM_INT))
    		return term.termInt
    	if (term.eIsSet(POGLPackage.Literals.TERM__TERM_ITEM))
    		return term.termItem.name
    	return "0"
    }
    
    
    private def dispatch visit(org.dnd.pOGL.MessageDisplay messageDisplay) '''
        show "«messageDisplay.message»";
    '''
    
    private def dispatch visit(org.dnd.pOGL.ActionVisibilityChange actionVisibilityChange) '''
        «actionVisibilityChange.verb» «actionVisibilityChange.action.name»;
    '''
    
    private def dispatch visit(org.dnd.pOGL.StateTransition stateTransition) '''
        goto «stateTransition.state.name»;
    '''
}

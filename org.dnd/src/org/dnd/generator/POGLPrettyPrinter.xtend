/*
 * generated by Xtext 2.29.0
 */
package org.dnd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.dnd.pOGL.POGLPackage

/**
 * Pretty-prints POGL programs.
 */
class POGLPrettyPrinter implements POGLAbstractGenerator {
	
	String filename

	String program
	
	String content
	
	override void generate(Resource input, IFileSystemAccess2 fsa) {
		filename = input.URI.path.substring(input.URI.path.lastIndexOf('/') + 1);
		program = ""
		
		// Pretty-print imports
		for (e : input.allContents.toIterable.filter(org.dnd.pOGL.Import)) {
            program += e.visit
        }
        
        // Pretty-print adventures
		for (e : input.allContents.toIterable.filter(org.dnd.pOGL.Adventure)) {
            program += e.visit
        }
        
        System.out.println(input.URI);
        
        // Generate output file
        fsa.generateFile(filename, program)
	}
	
	private def dispatch visit(org.dnd.pOGL.Import importStatement) '''
        import "«importStatement.importURI»";
    '''
    
    private def dispatch visit(org.dnd.pOGL.Adventure adventure) '''
    adventure «adventure.name» begin
    	«FOR definition : adventure.definitions»«definition.visit»«ENDFOR»
    end
    '''
	
	private def dispatch visit(org.dnd.pOGL.State state) '''
        state «state.name» «state.optionalStateModifier» "«state.description»";
    '''
    
    private def dispatch visit(org.dnd.pOGL.Item item) '''
        item «item.name»«IF item.eIsSet(POGLPackage.Literals.ITEM__VALUE)» set «item.value»«ENDIF»;
    '''
    
    private def dispatch visit(org.dnd.pOGL.Action action) '''
        action «action.name» «IF action.eIsSet(POGLPackage.Literals.ACTION__VISIBILITY)»«action.visibility»«ENDIF» in «action.state.name» "«action.description»" do
        	«FOR instruction : action.instructions»«instruction.visit»«ENDFOR»
        endaction
    '''
    
    private def dispatch visit(org.dnd.pOGL.ItemManipulation itemManipulation) '''
        «printFullyQualifiedItem(itemManipulation.item)» «itemManipulation.operator» «itemManipulation.value»;
    '''
    
    private def dispatch visit(org.dnd.pOGL.Check check) {
    	var content = "check " + check.expression.visit;
    	for (expression : check.andExpressions) {
    		content += " and " + expression.visit
    	}
    	return content + "then\n" + '''
	        	«FOR instruction : check.instructionsIfTrue»«instruction.visit»«ENDFOR»
	        «IF check.eIsSet(POGLPackage.Literals.CHECK__INSTRUCTIONS_IF_FALSE)»
	        else
	        	«FOR instruction : check.instructionsIfFalse»«instruction.visit»«ENDFOR»
	        «ENDIF»
	        endcheck
    	'''
    }
    
    private def dispatch visit(org.dnd.pOGL.Expression expression) '''
        «expression.left.visit» «expression.operator» «expression.right.visit»
    '''
    
    private def dispatch visit(org.dnd.pOGL.Term term) {
    	if (term.eIsSet(POGLPackage.Literals.TERM__TERM_INT))
    		return term.termInt
    	if (term.eIsSet(POGLPackage.Literals.TERM__TERM_ITEM))
    		return printFullyQualifiedItem(term.termItem)
    	return "0"
    }
    
    
    private def dispatch visit(org.dnd.pOGL.MessageDisplay messageDisplay) '''
        show "«messageDisplay.message»";
    '''
    
    private def dispatch visit(org.dnd.pOGL.ActionVisibilityChange actionVisibilityChange) '''
        «actionVisibilityChange.verb» «printFullyQualifiedAction(actionVisibilityChange.action)»;
    '''
    
    private def dispatch visit(org.dnd.pOGL.StateTransition stateTransition) '''
        goto «printFullyQualifiedState(stateTransition.state)»;
    '''
    
    private def printFullyQualifiedState(org.dnd.pOGL.FullyQualifiedState fullyQualifiedState) {
    	content = "";
    	if (fullyQualifiedState.eIsSet(POGLPackage.Literals.FULLY_QUALIFIED_STATE__ADVENTURE)) {
    		content += fullyQualifiedState.adventure.name + ".";
    	}
    	content += fullyQualifiedState.state.name;
    	
    	return content;
    }
    
    private def printFullyQualifiedItem(org.dnd.pOGL.FullyQualifiedItem fullyQualifiedItem) {
    	content = "";
    	if (fullyQualifiedItem.eIsSet(POGLPackage.Literals.FULLY_QUALIFIED_ITEM__ADVENTURE)) {
    		content += fullyQualifiedItem.adventure.name + ".";
    	}
    	content += fullyQualifiedItem.item.name;
    	
    	return content;
    }
    
    private def printFullyQualifiedAction(org.dnd.pOGL.FullyQualifiedAction fullyQualifiedAction) {
    	content = "";
    	if (fullyQualifiedAction.eIsSet(POGLPackage.Literals.FULLY_QUALIFIED_ACTION__ADVENTURE)) {
    		content += fullyQualifiedAction.adventure.name + ".";
    	}
    	content += fullyQualifiedAction.action.name;
    	
    	return content;
    }
}
